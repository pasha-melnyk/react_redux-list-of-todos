{"version":3,"sources":["store/index.ts","api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["SET_TODOS","SET_USER_ID","INVERT_USER_LOADER_VISIBILITY","SET_USER","setTodos","todosFromServer","type","payload","setSelectedUserId","userId","invertUserLoaderVisibility","setUser","user","getTodos","state","todos","getSelectedUserId","selectedUserId","getIsUserLoading","isUserLoading","getUser","initialState","store","createStore","action","composeWithDevTools","API_URL","TodoList","dispatch","useDispatch","useSelector","useState","todosToShow","setTodosToShow","preparedTodos","setPreparedTodos","title","setTitle","titleToSearch","setTitleToSearch","todosLoading","setTodosLoading","useEffect","a","fetch","then","response","json","copiedTodos","filter","todo","toLowerCase","includes","completed","prepareTodos","className","htmlFor","id","name","placeholder","value","onChange","event","target","classNames","onClick","sort","Math","random","max","map","checked","todoId","changedTodos","changeTodoStatus","deleteTodo","CurrentUser","loadUser","catch","error","Error","String","currentUser","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1de4cd9c.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst SET_TODOS = 'SET_TODOS';\nconst SET_USER_ID = 'SET_USER_ID';\nconst INVERT_USER_LOADER_VISIBILITY = 'SET_USER_LOADER_VISIBILITY';\nconst SET_USER = 'SET_USER';\n\nexport const setTodos = (todosFromServer: Todo[]) => (\n  { type: SET_TODOS, payload: todosFromServer }\n);\n\nexport const setSelectedUserId = (userId: number) => (\n  { type: SET_USER_ID, payload: userId }\n);\n\nexport const invertUserLoaderVisibility = () => (\n  { type: INVERT_USER_LOADER_VISIBILITY }\n);\n\nexport const setUser = (user: User | null) => (\n  { type: SET_USER, payload: user }\n);\n\nexport const getTodos = (state: RootState) => state.todos;\nexport const getSelectedUserId = (state: RootState) => state.selectedUserId;\nexport const getIsUserLoading = (state: RootState) => state.isUserLoading;\nexport const getUser = (state: RootState) => state.user;\n\nexport type RootState = {\n  selectedUserId: number;\n  todos: Todo[];\n  isUserLoading: boolean;\n  user: User | null;\n};\n\nconst initialState: RootState = {\n  selectedUserId: 0,\n  todos: [],\n  isUserLoading: false,\n  user: null,\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.payload,\n      };\n\n    case SET_USER_ID:\n      return {\n        ...state,\n        selectedUserId: action.payload,\n      };\n\n    case INVERT_USER_LOADER_VISIBILITY:\n      return {\n        ...state,\n        isUserLoading: !state.isUserLoading,\n      };\n\n    case SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","const API_URL = 'https://mate.academy/students-api';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function getUser(userId: number): Promise<User> {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => response.json())\n    .catch(error => {\n      throw new Error(String(error));\n    });\n}\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  setTodos,\n  getTodos,\n  getSelectedUserId,\n  setSelectedUserId,\n  invertUserLoaderVisibility,\n} from '../../store';\nimport './TodoList.scss';\nimport { getTodos as getTodosFromServer } from '../../api/api';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodos);\n  const selectedUserId = useSelector(getSelectedUserId);\n\n  const [todosToShow, setTodosToShow] = useState('');\n  const [preparedTodos, setPreparedTodos] = useState([] as Todo[]);\n  const [title, setTitle] = useState('');\n  const [titleToSearch, setTitleToSearch] = useState('');\n  const [todosLoading, setTodosLoading] = useState(false);\n\n  useEffect(() => {\n    setTodosLoading(true);\n    (async () => {\n      const todosFromServer = await getTodosFromServer();\n\n      dispatch(setTodos(todosFromServer));\n      setTodosLoading(false);\n    })();\n  }, []);\n\n  const prepareTodos = () => {\n    let copiedTodos = [...todos];\n\n    if (titleToSearch) {\n      copiedTodos = copiedTodos.filter(\n        todo => todo.title.toLowerCase().includes(titleToSearch),\n      );\n    }\n\n    switch (todosToShow) {\n      case 'active':\n        setPreparedTodos(copiedTodos.filter(todo => !todo.completed));\n        break;\n\n      case 'completed':\n        setPreparedTodos(copiedTodos.filter(todo => todo.completed));\n        break;\n\n      default:\n        setPreparedTodos(copiedTodos);\n    }\n  };\n\n  useEffect(() => {\n    prepareTodos();\n  }, [todos, titleToSearch, todosToShow]);\n\n  const handleChangeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setTitle(value);\n    setTitleToSearch(value.toLowerCase());\n  };\n\n  const changeTodoStatus = (todoId: number) => {\n    const changedTodos = todos.map(todo => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    });\n\n    dispatch(setTodos(changedTodos));\n  };\n\n  const randomizeOrder = () => {\n    const copiedTodos = [...todos];\n\n    copiedTodos.sort(() => Math.random() - 0.5);\n\n    dispatch(setTodos(copiedTodos));\n  };\n\n  const selectUser = (userId: number) => {\n    dispatch(setSelectedUserId(userId));\n    if (userId !== selectedUserId && userId !== 0) {\n      dispatch(invertUserLoaderVisibility());\n    }\n  };\n\n  const deleteTodo = (todoId: number) => {\n    const copiedTodos = todos.filter(todo => todo.id !== todoId);\n\n    dispatch(setTodos(copiedTodos));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__search-bar\">\n        <label className=\"label\" htmlFor=\"title-input\">\n          Search todo:\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              className=\"input TodoList__title-input\"\n              id=\"title-search-bar\"\n              name=\"titleToSearch\"\n              placeholder=\"Title\"\n              value={title}\n              onChange={handleChangeTitle}\n            />\n          </div>\n        </label>\n\n        <div className=\"select\">\n          <select\n            name=\"todosToShow\"\n            value={todosToShow}\n            onChange={event => setTodosToShow(event.target.value)}\n          >\n            <option value=\"\">Show all</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </div>\n        <button\n          type=\"button\"\n          name=\"isRandomized\"\n          className={classNames(\n            'button',\n            'TodoList__randomize-button',\n            'is-light',\n          )}\n          onClick={randomizeOrder}\n        >\n          Randomize\n        </button>\n      </div>\n\n      {todosLoading ? (\n        <progress\n          className={classNames(\n            'progress',\n            'is-small',\n            'is-link',\n          )}\n          max=\"100\"\n        >\n          10%\n        </progress>\n      ) : (\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {preparedTodos.map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed },\n                )}\n                key={todo.id}\n              >\n\n                <label htmlFor={`todo-checkbox-${todo.id}`}>\n                  <input\n                    type=\"checkbox\"\n                    id={`todo-checkbox-${todo.id}`}\n                    name=\"todo-checkbox\"\n                    checked={todo.completed}\n                    onChange={() => changeTodoStatus(todo.id)}\n                  />\n                  <p>\n                    {todo.title}\n                    {todo.id}\n                  </p>\n                </label>\n\n                <div className=\"TodoList__button-wrapper\">\n                  <button\n                    type=\"button\"\n                    className=\"button TodoList__delete-button\"\n                    onClick={() => deleteTodo(todo.id)}\n                  >\n                    Delete\n                  </button>\n\n                  <button\n                    className={classNames(\n                      'TodoList__user-button',\n                      'button',\n                      { 'TodoList__user-button--selected': selectedUserId === todo.userId },\n                    )}\n                    type=\"button\"\n                    value={todo.userId}\n                    onClick={() => selectUser(todo.userId)}\n                  >\n                    {`User#${todo.userId}`}\n                  </button>\n                </div>\n\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  getSelectedUserId,\n  setSelectedUserId,\n  invertUserLoaderVisibility,\n  getUser,\n  setUser,\n} from '../../store';\nimport { getUser as getUserFromServer } from '../../api/api';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedUserId = useSelector(getSelectedUserId);\n  const user = useSelector(getUser);\n\n  const loadUser = async () => {\n    const currentUser = await getUserFromServer(selectedUserId);\n\n    dispatch(setUser(currentUser));\n    dispatch(invertUserLoaderVisibility());\n  };\n\n  useEffect(() => {\n    dispatch(setUser(null));\n    loadUser();\n  }, [selectedUserId]);\n\n  const selectUser = (userId: number) => {\n    dispatch(setSelectedUserId(userId));\n    if (userId !== selectedUserId && userId !== 0) {\n      dispatch(invertUserLoaderVisibility());\n    }\n  };\n\n  return (\n    <>\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${selectedUserId}`}</span>\n      </h2>\n      {user && (\n        <div className=\"CurrentUser\">\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n          <button\n            type=\"button\"\n            className=\"button CurrentUser__clear\"\n            onClick={() => selectUser(0)}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport './styles/general.scss';\nimport classNames from 'classnames';\n\nimport { useSelector } from 'react-redux';\nimport { getSelectedUserId, getIsUserLoading } from './store';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport './App.scss';\n\nconst App: React.FC = () => {\n  const selectedUserId = useSelector(getSelectedUserId);\n  const isUserLoading = useSelector(getIsUserLoading);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <progress\n            className={classNames(\n              'progress',\n              'is-small',\n              'is-link',\n              { 'App__content--hidden': !isUserLoading },\n            )}\n            max=\"100\"\n          >\n            10%\n          </progress>\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}